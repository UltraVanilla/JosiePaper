From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 6 May 2020 05:00:57 -0400
Subject: [PATCH] Handle Oversized Tile Entities in chunks

Splits out Extra Packets if too many TE's are encountered to prevent
creating too large of a packet to sed.

Co authored by Spottedleaf

diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
index b89965c73bb6f40e688bd29daf6630ccce054100..d004997cb94648a24135f0478be3a25393b67925 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
@@ -24,6 +24,14 @@ public class ClientboundLevelChunkPacketData {
     private final CompoundTag heightmaps;
     private final byte[] buffer;
     private final List<ClientboundLevelChunkPacketData.BlockEntityInfo> blockEntitiesData;
+    // Paper start
+    private final java.util.List<net.minecraft.network.protocol.Packet> extraPackets = new java.util.ArrayList<>();
+    private static final int TE_LIMIT = Integer.getInteger("Paper.excessiveTELimit", 750);
+
+    public List<net.minecraft.network.protocol.Packet> getExtraPackets() {
+        return this.extraPackets;
+    }
+    // Paper end
 
     public ClientboundLevelChunkPacketData(LevelChunk chunk) {
         this.heightmaps = new CompoundTag();
@@ -37,8 +45,18 @@ public class ClientboundLevelChunkPacketData {
         this.buffer = new byte[calculateChunkSize(chunk)];
         extractChunkData(new FriendlyByteBuf(this.getWriteBuffer()), chunk);
         this.blockEntitiesData = Lists.newArrayList();
+        int totalTileEntities = 0; // Paper
 
         for(Map.Entry<BlockPos, BlockEntity> entry2 : chunk.getBlockEntities().entrySet()) {
+            // Paper start
+            if (++totalTileEntities > TE_LIMIT) {
+                var packet = entry2.getValue().getUpdatePacket();
+                if (packet != null) {
+                    this.extraPackets.add(packet);
+                    continue;
+                }
+            }
+            // Paper end
             this.blockEntitiesData.add(ClientboundLevelChunkPacketData.BlockEntityInfo.create(entry2.getValue()));
         }
 
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket.java
index aee73c4e20aff9bd0a560dc891f74f4f601c24b6..7825d6f0fdcfda6212cff8033ec55fb7db236154 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket.java
@@ -57,4 +57,11 @@ public class ClientboundLevelChunkWithLightPacket implements Packet<ClientGamePa
     public ClientboundLightUpdatePacketData getLightData() {
         return this.lightData;
     }
+
+    // Paper start - handle over-sized TE packets
+    @Override
+    public java.util.List<Packet> getExtraPackets() {
+        return this.chunkData.getExtraPackets();
+    }
+    // Paper end
 }
