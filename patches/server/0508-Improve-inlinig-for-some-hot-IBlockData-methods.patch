From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Mon, 6 Jul 2020 20:46:50 -0700
Subject: [PATCH] Improve inlinig for some hot IBlockData methods


diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index d75eb5eef83c9b0d247c7d8cb5021e931fe3ef4c..254ac28e692cf06c3286c8f4c6edb9de412851a2 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -716,8 +716,14 @@ public abstract class BlockBehaviour {
             return this.shapeExceedsCube;
         }
         // Paper end
+        // Paper start
+        protected boolean isTicking;
+        protected FluidState fluid;
+        // Paper end
 
         public void initCache() {
+            this.fluid = this.getBlock().getFluidState(this.asState()); // Paper - moved from getFluid()
+            this.isTicking = this.getBlock().isRandomlyTicking(this.asState()); // Paper - moved from isTicking()
             if (!this.getBlock().hasDynamicShape()) {
                 this.cache = new BlockBehaviour.BlockStateBase.Cache(this.asState());
             }
@@ -767,15 +773,15 @@ public abstract class BlockBehaviour {
             return this.shapeExceedsCube; // Paper - moved into shape cache init
         }
 
-        public boolean useShapeForLightOcclusion() {
+        public final boolean useShapeForLightOcclusion() { // Paper
             return this.useShapeForLightOcclusion;
         }
 
-        public int getLightEmission() {
+        public final int getLightEmission() { // Paper
             return this.lightEmission;
         }
 
-        public boolean isAir() {
+        public final boolean isAir() { // Paper
             return this.isAir;
         }
 
@@ -849,7 +855,7 @@ public abstract class BlockBehaviour {
             }
         }
 
-        public boolean canOcclude() {
+        public final boolean canOcclude() { // Paper
             return this.canOcclude;
         }
 
@@ -1047,12 +1053,12 @@ public abstract class BlockBehaviour {
             return this.getBlock() == block;
         }
 
-        public FluidState getFluidState() {
-            return this.getBlock().getFluidState(this.asState());
+        public final FluidState getFluidState() { // Paper
+            return this.fluid; // Paper - moved into init
         }
 
-        public boolean isRandomlyTicking() {
-            return this.getBlock().isRandomlyTicking(this.asState());
+        public final boolean isRandomlyTicking() { // Paper
+            return this.isTicking; // Paper - moved into init
         }
 
         public long getSeed(BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/material/FluidState.java b/src/main/java/net/minecraft/world/level/material/FluidState.java
index d035eaccc09dfeaedf25579b850ccdaecba3f974..66f712657ae0c4166ecd198f41081d96843296c4 100644
--- a/src/main/java/net/minecraft/world/level/material/FluidState.java
+++ b/src/main/java/net/minecraft/world/level/material/FluidState.java
@@ -26,8 +26,12 @@ public final class FluidState extends StateHolder<Fluid, FluidState> {
     public static final int AMOUNT_MAX = 9;
     public static final int AMOUNT_FULL = 8;
 
+    // Paper start
+    protected final boolean isEmpty;
+    // Paper end
     public FluidState(Fluid fluid, ImmutableMap<Property<?>, Comparable<?>> propertiesMap, MapCodec<FluidState> codec) {
         super(fluid, propertiesMap, codec);
+        this.isEmpty = fluid.isEmpty(); // Paper - moved from isEmpty()
     }
 
     public Fluid getType() {
@@ -43,7 +47,7 @@ public final class FluidState extends StateHolder<Fluid, FluidState> {
     }
 
     public boolean isEmpty() {
-        return this.getType().isEmpty();
+        return this.isEmpty; // Paper - moved into constructor
     }
 
     public float getHeight(BlockGetter world, BlockPos pos) {
