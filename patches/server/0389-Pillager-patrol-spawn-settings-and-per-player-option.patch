From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Phoenix616 <mail@moep.tv>
Date: Sat, 1 Feb 2020 16:50:39 +0100
Subject: [PATCH] Pillager patrol spawn settings and per player options

This adds config options for defining the spawn chance, spawn delay and
spawn start day as well as toggles for handling the spawn delay and
start day per player. (Based on the time played statistic)
When not per player it will use the Vanilla mechanic of one delay per
world and the world age for the start day.

diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index c6e721b19ddc9e01ffbed765aaf52bef50e80b1d..00d1ea2440aecd81fc0e23a06f53890c55424ab3 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -510,10 +510,21 @@ public class PaperWorldConfig {
     }
 
     public boolean disablePillagerPatrols = false;
+    public double patrolSpawnChance = 0.2;
+    public boolean patrolPerPlayerDelay = false;
+    public int patrolDelay = 12000;
+    public boolean patrolPerPlayerStart = false;
+    public int patrolStartDay = 5;
     private void pillagerSettings() {
         disablePillagerPatrols = getBoolean("game-mechanics.disable-pillager-patrols", disablePillagerPatrols);
+        patrolSpawnChance = getDouble("game-mechanics.pillager-patrols.spawn-chance", patrolSpawnChance);
+        patrolPerPlayerDelay = getBoolean("game-mechanics.pillager-patrols.spawn-delay.per-player", patrolPerPlayerDelay);
+        patrolDelay = getInt("game-mechanics.pillager-patrols.spawn-delay.ticks", patrolDelay);
+        patrolPerPlayerStart = getBoolean("game-mechanics.pillager-patrols.start.per-player", patrolPerPlayerStart);
+        patrolStartDay = getInt("game-mechanics.pillager-patrols.start.day", patrolStartDay);
     }
 
+
     public boolean entitiesTargetWithFollowRange = false;
     private void entitiesTargetWithFollowRange() {
         entitiesTargetWithFollowRange = getBoolean("entities-target-with-follow-range", entitiesTargetWithFollowRange);
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 4ca8f2f63e04da730a85a36d57058a481d1f9104..f515ef16ef0c92c6cf59301d2818ad714554030a 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -220,6 +220,7 @@ public class ServerPlayer extends Player {
     public boolean wonGame;
     private int containerUpdateDelay; // Paper
     public long loginTime; // Paper
+    public int patrolSpawnDelay; // Paper - per player patrol spawns
     // Paper start - cancellable death event
     public boolean queueHealthUpdatePacket = false;
     public net.minecraft.network.protocol.game.ClientboundSetHealthPacket queuedHealthUpdatePacket;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/PatrolSpawner.java b/src/main/java/net/minecraft/world/level/levelgen/PatrolSpawner.java
index 744b58d59a5f34ed3bd6f2d4a0f876acfa6a7135..a3bb1d83e413a1f31b9ece4291e9ef11b3a70f0c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/PatrolSpawner.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/PatrolSpawner.java
@@ -4,11 +4,12 @@ import java.util.Random;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.stats.Stats;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.monster.PatrollingMonster;
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.CustomSpawner;
 import net.minecraft.world.level.GameRules;
@@ -26,7 +27,7 @@ public class PatrolSpawner implements CustomSpawner {
 
     @Override
     public int tick(ServerLevel world, boolean spawnMonsters, boolean spawnAnimals) {
-        if (world.paperConfig.disablePillagerPatrols) return 0; // Paper
+        if (world.paperConfig.disablePillagerPatrols || world.paperConfig.patrolSpawnChance == 0) return 0; // Paper
         if (!spawnMonsters) {
             return 0;
         } else if (!world.getGameRules().getBoolean(GameRules.RULE_DO_PATROL_SPAWNING)) {
@@ -34,23 +35,51 @@ public class PatrolSpawner implements CustomSpawner {
         } else {
             Random random = world.random;
 
-            --this.nextTick;
-            if (this.nextTick > 0) {
+            // Paper start - Patrol settings
+            // Random player selection moved up for per player spawning and configuration
+            int j = world.players().size();
+            if (j < 1) {
                 return 0;
+            }
+
+            ServerPlayer entityhuman = world.players().get(random.nextInt(j));
+            if (entityhuman.isSpectator()) {
+                return 0;
+            }
+
+            int patrolSpawnDelay;
+            if (world.paperConfig.patrolPerPlayerDelay) {
+                --entityhuman.patrolSpawnDelay;
+                patrolSpawnDelay = entityhuman.patrolSpawnDelay;
             } else {
-                this.nextTick += 12000 + random.nextInt(1200);
-                long i = world.getDayTime() / 24000L;
+                this.nextTick--;
+                patrolSpawnDelay = this.nextTick;
+            }
+
+            if (patrolSpawnDelay > 0) {
+                return 0;
+            } else {
+                long days;
+                if (world.paperConfig.patrolPerPlayerStart) {
+                    days = entityhuman.getStats().getValue(Stats.CUSTOM.get(Stats.PLAY_TIME)) / 24000L; // PLAY_ONE_MINUTE is actually counting in ticks, a misnomer by Mojang
+                } else {
+                    days = world.getDayTime() / 24000L;
+                }
+                if (world.paperConfig.patrolPerPlayerDelay) {
+                    entityhuman.patrolSpawnDelay += world.paperConfig.patrolDelay + random.nextInt(1200);
+                } else {
+                    this.nextTick += world.paperConfig.patrolDelay + random.nextInt(1200);
+                }
 
-                if (i >= 5L && world.isDay()) {
-                    if (random.nextInt(5) != 0) {
+                if (days >= world.paperConfig.patrolStartDay && world.isDay()) {
+                    if (random.nextDouble() >= world.paperConfig.patrolSpawnChance) {
+                        // Paper end
                         return 0;
                     } else {
-                        int j = world.players().size();
 
                         if (j < 1) {
                             return 0;
                         } else {
-                            Player entityhuman = (Player) world.players().get(random.nextInt(j));
 
                             if (entityhuman.isSpectator()) {
                                 return 0;
