From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Sun, 8 May 2022 13:35:58 -0700
Subject: [PATCH] ItemStack damage API

Adds methods notify clients about item breaks and
to simulate damage done to an itemstack and all
the logic associated with damaging them

diff --git a/src/main/java/org/bukkit/entity/LivingEntity.java b/src/main/java/org/bukkit/entity/LivingEntity.java
index 1999cd1b1aaa23589da4e11cf80139b8e7a2a539..c27aaec51ae4de593da4443e1e8a773e1b59aafa 100644
--- a/src/main/java/org/bukkit/entity/LivingEntity.java
+++ b/src/main/java/org/bukkit/entity/LivingEntity.java
@@ -1063,5 +1063,48 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @param directionZ The relative z position of the knockback source direction
      */
     void knockback(double strength, double directionX, double directionZ);
+
+    /**
+     * Notifies all clients tracking this entity that the item in
+     * the slot of this entity broke.
+     * <p>
+     * NOTE: this does not mutate any entity state
+     *
+     * @param slot the slot
+     */
+    void broadcastSlotBreak(org.bukkit.inventory.@NotNull EquipmentSlot slot);
+
+    /**
+     * Notifies specified players that the item in the slot
+     * of this entity broke.
+     * <p>
+     * NOTE: this does not mutate any entity state
+     *
+     * @param slot the slot
+     * @param players the players to notify
+     */
+    void broadcastSlotBreak(org.bukkit.inventory.@NotNull EquipmentSlot slot, @NotNull Collection<Player> players);
+
+    /**
+     * Damages this itemstack by the specified amount. This
+     * runs all logic associated with damaging an itemstack like
+     * events and stat changes.
+     *
+     * @param stack the itemstack to damage
+     * @param amount the amount of damage to do
+     * @return the damaged itemstack, or an empty stack if it broke. It may be the same instance as the stack passed it, but it may not.
+     */
+    @NotNull ItemStack damageItemStack(@NotNull ItemStack stack, int amount);
+
+    /**
+     * Damages the itemstack in this slot by the specified amount.
+     * This runs all logic associated with damaging an itemstack like
+     * events, stat changes, and notifying clients to play
+     * break animations.
+     *
+     * @param slot the slot of the stack to damage
+     * @param amount the amount of damage to do
+     */
+    void damageItemStack(org.bukkit.inventory.@NotNull EquipmentSlot slot, int amount);
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index b8a344fd900dcbd4b28085a54b85b16c742e9c6f..870c0ddd101094a3bce1ebf5ec4d42c51053db84 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -977,5 +977,19 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
     public boolean canRepair(@NotNull ItemStack toBeRepaired) {
         return Bukkit.getUnsafe().isValidRepairItemStack(toBeRepaired, this);
     }
+
+    /**
+     * Damages this itemstack by the specified amount. This
+     * runs all logic associated with damaging an itemstack like
+     * events and stat changes.
+     *
+     * @param amount the amount of damage to do
+     * @param livingEntity the entity related to the damage
+     * @return the damaged itemstack or an empty one if it broke. May return the same instance of ItemStack
+     * @see org.bukkit.entity.LivingEntity#damageItemStack(EquipmentSlot, int) to damage itemstacks in equipment slots
+     */
+    public @NotNull ItemStack damage(int amount, @NotNull org.bukkit.entity.LivingEntity livingEntity) {
+        return livingEntity.damageItemStack(this, amount);
+    }
     // Paper end
 }
