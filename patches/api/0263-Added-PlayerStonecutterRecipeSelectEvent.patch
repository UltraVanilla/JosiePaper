From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Fri, 27 Nov 2020 17:13:59 -0800
Subject: [PATCH] Added PlayerStonecutterRecipeSelectEvent


diff --git a/src/main/java/io/papermc/paper/event/player/PlayerStonecutterRecipeSelectEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerStonecutterRecipeSelectEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..fb1bca3a9d12096c9a2b2663f466a8ff5f2b4319
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/player/PlayerStonecutterRecipeSelectEvent.java
@@ -0,0 +1,59 @@
+package io.papermc.paper.event.player;
+
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.bukkit.inventory.StonecutterInventory;
+import org.bukkit.inventory.StonecuttingRecipe;
+import org.jetbrains.annotations.NotNull;
+
+public class PlayerStonecutterRecipeSelectEvent extends PlayerEvent implements Cancellable {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    private boolean cancelled;
+    private final StonecutterInventory stonecutterInventory;
+    private StonecuttingRecipe stonecuttingRecipe;
+
+    public PlayerStonecutterRecipeSelectEvent(@NotNull Player player, @NotNull StonecutterInventory stonecutterInventory, @NotNull StonecuttingRecipe stonecuttingRecipe) {
+        super(player);
+        this.stonecutterInventory = stonecutterInventory;
+        this.stonecuttingRecipe = stonecuttingRecipe;
+    }
+
+    @NotNull
+    public StonecutterInventory getStonecutterInventory() {
+        return stonecutterInventory;
+    }
+
+    @NotNull
+    public StonecuttingRecipe getStonecuttingRecipe() {
+        return stonecuttingRecipe;
+    }
+
+    public void setStonecuttingRecipe(@NotNull StonecuttingRecipe stonecuttingRecipe) {
+        this.stonecuttingRecipe = stonecuttingRecipe;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+}
