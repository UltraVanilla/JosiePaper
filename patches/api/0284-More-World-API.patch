From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Tue, 7 Jul 2020 10:53:22 -0700
Subject: [PATCH] More World API


diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index f463450c35e6fbba95c57a3a27192b667cb9e093..6864f71977196a2d8b685da5ea9ddc435ae5bc06 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -3633,6 +3633,114 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
     @Nullable
     public Location locateNearestStructure(@NotNull Location origin, @NotNull StructureType structureType, int radius, boolean findUnexplored);
 
+    // Paper start
+    /**
+     * Locates the nearest biome based on an origin, biome type, and radius to search.
+     * Step defaults to {@code 8}.
+     *
+     * @param origin Origin location
+     * @param biome Biome to find
+     * @param radius radius to search
+     * @return Location of biome or null if not found in specified radius
+     */
+    @Nullable
+    Location locateNearestBiome(@NotNull Location origin, @NotNull Biome biome, int radius);
+
+    /**
+     * Locates the nearest biome based on an origin, biome type, and radius to search
+     * and step
+     *
+     * @param origin Origin location
+     * @param biome Biome to find
+     * @param radius radius to search
+     * @param step Search step 1 would mean checking every block, 8 would be every 8th block
+     * @return Location of biome or null if not found in specified radius
+     */
+    @Nullable
+    Location locateNearestBiome(@NotNull Location origin, @NotNull Biome biome, int radius, int step);
+
+    /**
+     * Checks if the world:
+     * <ul>
+     *     <li>evaporates water</li>
+     *     <li>dries sponges</li>
+     *     <li>has lava spread faster and further</li>
+     * </ul>
+     *
+     * @return true if ultrawarm, false if not
+     * @deprecated use {@link #isUltraWarm()}
+     */
+    @Deprecated
+    boolean isUltrawarm();
+
+    /**
+     * Gets the coordinate scaling of this world.
+     *
+     * @return the coordinate scale
+     */
+    double getCoordinateScale();
+
+    /**
+     * Checks if the world has skylight access
+     *
+     * @return whether there is skylight
+     * @deprecated use {@link #hasSkyLight()}
+     */
+    @Deprecated
+    boolean hasSkylight();
+
+    /**
+     * Checks if the world has a bedrock ceiling
+     *
+     * @return whether the world has a bedrock ceiling
+     * @deprecated use {@link #hasCeiling()}
+     */
+    @Deprecated
+    boolean hasBedrockCeiling();
+
+    /**
+     * Checks if beds work
+     *
+     * @return whether beds work
+     * @deprecated use {@link #isBedWorks()}
+     */
+    @Deprecated
+    boolean doesBedWork();
+
+    /**
+     * Checks if respawn anchors work
+     *
+     * @return whether respawn anchors work
+     * @deprecated use {@link #isRespawnAnchorWorks()}
+     */
+    @Deprecated
+    boolean doesRespawnAnchorWork();
+
+    /**
+     * Checks if this world has a fixed time
+     *
+     * @return whether this world has fixed time
+     */
+    boolean isFixedTime();
+
+    /**
+     * Gets the collection of materials that burn infinitely in this world.
+     *
+     * @return the materials that will forever stay lit by fire
+     */
+    @NotNull
+    Collection<Material> getInfiniburn();
+
+    /**
+     * Posts a specified game event at a location
+     *
+     * @param sourceEntity optional source entity
+     * @param gameEvent the game event to post
+     * @param position the position in the world where to post the event to listeners
+     */
+    void sendGameEvent(@Nullable Entity sourceEntity, @NotNull GameEvent gameEvent, @NotNull Vector position);
+    // Paper end
+
     // Spigot start
     /**
      * Returns the view distance used for this world.
