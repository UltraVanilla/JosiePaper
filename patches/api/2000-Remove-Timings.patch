From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: BillyGalbreath <blake.galbreath@gmail.com>
Date: Fri, 1 Jul 2022 04:03:26 -0500
Subject: [PATCH] Remove Timings


diff --git a/src/main/java/co/aikar/timings/TimedEventExecutor.java b/src/main/java/co/aikar/timings/TimedEventExecutor.java
index 4e6e1b8e..13561b23 100644
--- a/src/main/java/co/aikar/timings/TimedEventExecutor.java
+++ b/src/main/java/co/aikar/timings/TimedEventExecutor.java
@@ -76,8 +76,8 @@ public class TimedEventExecutor implements EventExecutor {
             executor.execute(listener, event);
             return;
         }
-        try (Timing ignored = timings.startTiming()){
+        //try (Timing ignored = timings.startTiming()){ // Remove timings
             executor.execute(listener, event);
-        }
+        //} // Remove timings
     }
 }
diff --git a/src/main/java/co/aikar/timings/Timing.java b/src/main/java/co/aikar/timings/Timing.java
index a21e5ead..df201a7d 100644
--- a/src/main/java/co/aikar/timings/Timing.java
+++ b/src/main/java/co/aikar/timings/Timing.java
@@ -36,6 +36,7 @@ public interface Timing extends AutoCloseable {
      * @return Timing
      */
     @NotNull
+    @io.papermc.paper.annotation.DoNotUse // Remove timings
     Timing startTiming();
 
     /**
@@ -43,6 +44,7 @@ public interface Timing extends AutoCloseable {
      *
      * Will automatically be called when this Timing is used with try-with-resources
      */
+    @io.papermc.paper.annotation.DoNotUse // Remove timings
     void stopTiming();
 
     /**
@@ -53,6 +55,7 @@ public interface Timing extends AutoCloseable {
      * @return Timing
      */
     @NotNull
+    @io.papermc.paper.annotation.DoNotUse // Remove timings
     Timing startTimingIfSync();
 
     /**
@@ -62,12 +65,14 @@ public interface Timing extends AutoCloseable {
      *
      * But only if we are on the primary thread.
      */
+    @io.papermc.paper.annotation.DoNotUse // Remove timings
     void stopTimingIfSync();
 
     /**
      * @deprecated Doesn't do anything - Removed
      */
     @Deprecated
+    @io.papermc.paper.annotation.DoNotUse // Remove timings
     void abort();
 
     /**
@@ -79,5 +84,6 @@ public interface Timing extends AutoCloseable {
     TimingHandler getTimingHandler();
 
     @Override
+    @io.papermc.paper.annotation.DoNotUse // Remove timings
     void close();
 }
diff --git a/src/main/java/co/aikar/timings/Timings.java b/src/main/java/co/aikar/timings/Timings.java
index dd72a34e..80440a46 100644
--- a/src/main/java/co/aikar/timings/Timings.java
+++ b/src/main/java/co/aikar/timings/Timings.java
@@ -114,7 +114,7 @@ public final class Timings {
     @NotNull
     public static Timing ofStart(@NotNull Plugin plugin, @NotNull String name, @Nullable Timing groupHandler) {
         Timing timing = of(plugin, name, groupHandler);
-        timing.startTiming();
+        //timing.startTiming(); // Remove timings
         return timing;
     }
 
diff --git a/src/main/java/co/aikar/timings/TimingsCommand.java b/src/main/java/co/aikar/timings/TimingsCommand.java
index 3132dc98..3579eeee 100644
--- a/src/main/java/co/aikar/timings/TimingsCommand.java
+++ b/src/main/java/co/aikar/timings/TimingsCommand.java
@@ -44,7 +44,7 @@ public class TimingsCommand extends BukkitCommand {
     public TimingsCommand(@NotNull String name) {
         super(name);
         this.description = "Manages Spigot Timings data to see performance of the server.";
-        this.usageMessage = "/timings <reset|report|on|off|verbon|verboff>";
+        this.usageMessage = "/timings";// <reset|report|on|off|verbon|verboff>"; // Remove timings
         this.setPermission("bukkit.command.timings");
     }
 
@@ -53,6 +53,13 @@ public class TimingsCommand extends BukkitCommand {
         if (!testPermission(sender)) {
             return true;
         }
+        if (true) {
+            net.kyori.adventure.text.minimessage.MiniMessage mm = net.kyori.adventure.text.minimessage.MiniMessage.miniMessage();
+            sender.sendMessage(mm.deserialize("<gold>Remove timings has removed timings to save your performance. Please use <grey>/spark</grey> instead"));
+            sender.sendMessage(mm.deserialize("<gold>For more information, view its documentation at"));
+            sender.sendMessage(mm.deserialize("<gold><click:open_url:'url'>https://spark.lucko.me/docs/Command-Usage</click>"));
+            return true;
+        }
         if (args.length < 1) {
             sender.sendMessage(text("Usage: " + this.usageMessage, NamedTextColor.RED));
             return true;
@@ -111,7 +118,7 @@ public class TimingsCommand extends BukkitCommand {
         Preconditions.checkNotNull(args, "Arguments cannot be null");
         Preconditions.checkNotNull(alias, "Alias cannot be null");
 
-        if (args.length == 1) {
+        if (false && args.length == 1) { // Remove timings
             return StringUtil.copyPartialMatches(args[0], TIMINGS_SUBCOMMANDS,
                 new ArrayList<String>(TIMINGS_SUBCOMMANDS.size()));
         }
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index b8623575..b91083ea 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -150,10 +150,10 @@ public class SimpleCommandMap implements CommandMap {
         // Paper end
 
         try {
-            try (co.aikar.timings.Timing ignored = target.timings.startTiming()) { // Paper - use try with resources
+            // try (co.aikar.timings.Timing ignored = target.timings.startTiming()) { // Paper - use try with resources // Remove timings
             // Note: we don't return the result of target.execute as thats success / failure, we return handled (true) or not handled (false)
             target.execute(sender, sentCommandLabel, Arrays.copyOfRange(args, 1, args.length));
-            } // target.timings.stopTiming(); // Spigot // Paper
+            // } // target.timings.stopTiming(); // Spigot // Paper // Remove timings
         } catch (CommandException ex) {
             server.getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerCommandException(ex, target, sender, args))); // Paper
             //target.timings.stopTiming(); // Spigot // Paper
diff --git a/src/main/java/org/spigotmc/CustomTimingsHandler.java b/src/main/java/org/spigotmc/CustomTimingsHandler.java
index 123647bb..ff843e14 100644
--- a/src/main/java/org/spigotmc/CustomTimingsHandler.java
+++ b/src/main/java/org/spigotmc/CustomTimingsHandler.java
@@ -61,7 +61,7 @@ public final class CustomTimingsHandler {
         handler = timing;
     }
 
-    public void startTiming() { handler.startTiming(); }
-    public void stopTiming() { handler.stopTiming(); }
+    public void startTiming() { /*handler.startTiming();*/ } // Remove timings
+    public void stopTiming() { /*handler.stopTiming();*/ } // Remove timings
 
 }

